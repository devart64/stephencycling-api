<?php


namespace App\Tests\Unit;


use App\Entity\Article;
use App\Entity\User;
use PHPUnit\Framework\TestCase;

class UserTest extends TestCase
{

    private $User;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->User = New User();
    }

    public function testGetEmail():void {
        // fake email
        $value = "test@yopmail.com";
        // insert in suer object
        $response = $this->User->setEmail($value);

        self::assertInstanceOf(User::class, $response);
        // on attend Ã  recevoir l'email et le username
        self::assertEquals($value, $this->User->getEmail());
        self::assertEquals($value, $this->User->getUsername());
    }
    public function testGetRoles():void {

        $value = ["ROLE_ADMIN"];
        $response = $this->User->setRoles($value);
        self::assertInstanceOf(User::class, $response);
        self::assertContains("ROLE_USER", $this->User->getRoles());
        self::assertContains("ROLE_ADMIN", $this->User->getRoles());

    }
    public function testGetPassword():void {

        $value = "password";
        $response = $this->User->setPassword($value);
        self::assertInstanceOf(User::class, $response);
        self::assertEquals($value, $this->User->getPassword());

    }

    public function testGetArticle(): void{
        $value = new Article();
        $response = $this->User->addArticle($value);

        self::assertInstanceOf(User::class, $response);
        self::assertCount(1 ,$this->User->getArticles());
        self::assertTrue($this->User->getArticles()->contains($value));

        $response = $this->User->removeArticle($value);
        self::assertInstanceOf(User::class, $response);
        self::assertCount(0 ,$this->User->getArticles());
        self::assertFalse($this->User->getArticles()->contains($value));
    }

}